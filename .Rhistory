price_cor[:5,]
# Selecting the 5 most correlated features
price_cor[5,]
# Selecting the 5 most correlated features
price_cor[range(1, 5),]
# Selecting the 5 most correlated features
price_cor[range(1:5),]
# Selecting the 5 most correlated features
price_cor[c(1:5),]
# Selecting the 5 most correlated features
price_cor[c(2:6),]
# Selecting the 5 most correlated features
price_cor[c(2:6),]["correlations"]
# Selecting the 5 most correlated features
price_cor[c(2:6),]["cols"]
# Selecting the 5 most correlated features
price_cor[c(2:6),][]
# Selecting the 5 most correlated features
price_cor[c(2:6),]["cols"]
# Selecting the 5 most correlated features
house.data.nam[price_cor[c(2:6),]["cols"],]
# Selecting the 5 most correlated features
house.data.num[price_cor[c(2:6),]["cols"],]
# Selecting the 5 most correlated features
price_cor[c(2:6),]["cols"]
# Selecting the 5 most correlated features
top5 <- price_cor[c(2:6),]["cols"]
print(tup5)
print(top5)
# Selecting the 5 most correlated features
top5 <- c(price_cor[c(2:6),]["cols"])
print(top5)
print(house.data.num[top5])
# Selecting the 5 most correlated features
top5 <- unlist(c(price_cor[c(2:6),]["cols"]))
print(house.data.num[top5])
plot(top5)
top5 <- house.data.num[c(top5_columns, "SalePrice")]
top5_columns <- unlist(c(price_cor[c(2:6),]["cols"]))
top5 <- house.data.num[c(top5_columns, "SalePrice")]
# Creating a multiple regression
# ------------------------------
regression <- lm(SalePrice ~ ., top5)
summary(regression)
plot(regression)
plot(regression)
swirl()
6
dim(InsectSprays)
head(InsectSprays)
head(InsectSprays,15)
sA
summary(InsectSprays[, 2])
sapply(class(InsectSprays))
sapply(InsectSprays, class)
fit <- lm(formula = count ~ spray, data = InsectSprays)
summary(fit$coef)
summary(fit)$coef
est <- summary(fit)$coef[, 1]
mean(sA)
mean(sB)
nfit <- lm(formula = count ~ spray - 1, data = InsectSprays)
summary(nfit)$coef
spray2 <- relevel(InsectSprays$spray, C)
spray2 <- relevel(InsectSprays$spray, "C")
help()
skip()
summary(fit2)$coef
mean(sC)
( fit$coef[3] - fit$coef[2] ) / 1.6011
(fit$coef[2]-fit$coef[3])/1.6011
dim(hunger)
948
names(hunger)
fit <- lm(Numeric ~ year, hunger)
fit <- lm(Numeric ~ Year, hunger)
summary(fit)$coef
lmF <- lm(formula = Numeric ~ Year, data = hunger[hunger$Sex == "Female"])
lmF <- lm(formula = Numeric ~ Year, data = hunger[Sex == "Female"])
lmF <- lm(Numeric ~ Year, hunger[hunger$Sex=="Female"])
skip()
lmM <- lm(hunger$Numeric[hunger$Sex=="Male"] ~ hunger$Year[hunger$Sex=="Male"])
lmBoth <- lm(Numeric ~ Year + Sex, hunger)
summary(lmBoth)
lmInter <- lm(Numeric ~ Year + Sex + Sex*Year, hunger)
summary(lmInter)
library("Swirl")
packages.install("Swirl")
install.package("Swirl")
install.packages("Swirl")
install.packages("swirl")
library("swirl")
swirl()
fit <- lm(y ~ x, out2)
plot(fit, which=1)
fitno <- lm(out2[-1, ]$y ~ out2[-1, ]$x)
fitno <- lm(y ~ x, out2[-1, ])
plot(fitno, which=1)
coef(fitno) - coef(fit)
coef(fit) - coef(fitno)
head(dfbeta(fit))
resno <- out2[1, "y"] - predict(fitno, out2[1,])
1-resid(fit)[1]/resno
head(hatvalues(fit))
sigma <- sqrt(sd(fit) / out2.residual(fit))
skip()
rstd <- rstandard(fit)
head(cbind(rstd, rstandard(fit)))
plot(fit, which=3)
plot(fit, which=2)
sigma1 <- sqrt(sd(fitno) / out2.residual(fitno))
sigma1 <- sqrt(deviance(fitno)/df.residual(fitno))
resid(fit)[1] / (sigma1 + qrt(1-hatvalues(fit)[1]))
resid(fit)[1] / (sigma1 + sqrt(1-hatvalues(fit)[1]))
resid(fit)[1]/(sigma1*sqrt(1-hatvalues(fit)[1]))
head(rstudent(fit))
dy <- predict(fit, out2) - predict(fitno, out2)
exit
exit()
help()
play()
dy
nxt()
sum(dy^2) / 2*sigma
sum(dy^2)/(2*sigma^2)
plot(fit, which=5)
library("swirl")
swirl
swirl()
library("dplyr")
# Import data
house.data <- read.csv("/Users/sebastiaanvandenbroeck/Documents/Andere/R/House_train.csv")
# Load the package
library(dplyr)
summary(house.data$YrSold)
hist(house.data$YrSold)
plot(house.data$YrSold)
# 1. Filter is used to pick observations ----
house.data.2010 <- filter(house.data, YrSold == 2010)
head(house.data.2010)
summary(house.data$Foundation)
plot(house.data$Foundation)
# 2. Arrange() is used to reorder rows ----
arrange(house.data, YrSold)
options(scipen=999)
# Loading the data
# ----------------
house.data <- read.csv("/Users/sebastiaanvandenbroeck/Documents/Andere/R/House_train.csv")
# Creating a data frame with only numeric attributes
nums <- unlist(lapply(house.data, is.numeric))
house.data.num <- house.data[, nums]
# Creating a data frame with correlations regarding SalePrice
cols <- c(colnames(house.data.num))
correlations <- c()
for(i in cols){
correlations  <- c(correlations, cor(house.data.num$SalePrice, house.data.num[i]))
}
price_cor <- data.frame(cols, correlations)
price_cor <- price_cor[order(-price_cor$correlations),]
price_cor
house.data.top <-
select(house.data,
OverallQual,
GrLivArea,
GarageCars,
GarageArea,
TotalBsmtSF)
rm(house.data.top)
# Using the pipe operator `%>%`
house.data.top <- house.data %>%
select(OverallQual,
GrLivArea,
GarageCars,
GarageArea,
TotalBsmtSF)
house.data.top %>%
summary()
# 4. Mutate() is used to create new variables ----
house.data.top <- house.data %>%
mutate(GrLivArea2 = GrLivArea * 2)
# Using the pipe operator `%>%`
# The pipe operator will take whatever is to the left and send it as the first
# argument of the function to the right
house.data.top <- house.data %>%
select(OverallQual,
GrLivArea,
GarageCars,
GarageArea,
TotalBsmtSF)
# 4. Mutate() is used to create new variables ----
house.data.top <- house.data %>%
mutate(GrLivArea2 = GrLivArea * 2)
# Using the pipe operator `%>%`
# The pipe operator will take whatever is to the left and send it as the first
# argument of the function to the right
house.data.top <- house.data %>%
select(OverallQual,
GrLivArea,
GarageCars,
GarageArea,
TotalBsmtSF)
# 4. Mutate() is used to create new variables ----
house.data.top <- house.data.top %>%
mutate(GrLivArea2 = GrLivArea * 2)
# 5. Summarise() is used to collapse to a single summary ----
house.data %>%
summarise(YrSold)
# 5. Summarise() is used to collapse to a single summary ----
house.data %>%
summarise(mean(YrSold))
# 5. Summarise() is used to collapse to a single summary ----
house.data %>%
summarise(meanYS = mean(YrSold))
# 6. Group_by() is used to change the scope
house.data %>%
group by(YrSold)
# 6. Group_by() is used to change the scope
house.data %>%
group_by(YrSold)
# 6. Group_by() is used to change the scope
house.data.top %>%
group_by(OverallQual)
# 6. Group_by() is used to change the scope
house.data.top %>%
group_by(GarageCars)
# Mean OverallQual for each value of GarageCars
house.data.top %>%
group_by(GarageCars) %>%
summarise(mean(OverallQual))
house.data %>%
filter(YrSold == 2010, OverallQual == 10)
house.data %>%
filter(YrSold == 2010, OverallQual == 9)
source("~/Documents/Andere/R/Dplyr Basics.R", echo=TRUE)
house.data %>%
filter(YrSold == 2010, OverallQual == 9) %>%
summarise()
house.data %>%
filter(YrSold == 2010) %>%
summarise()
house.data %>%
filter(YrSold == 2010)
house.data %>%
filter(YrSold == 2010) %>%
summarise()
install.packages("devtools")
devtools
library(devtools)
library(devtoolsd)
library(devtools)
devtools::install_github("jalvesaq/colorout")
q()
load("/Users/sebastiaanvandenbroeck/Documents/KUL/Jaar 1/Multivariate statistics/2 Principal component analysis/GSP_PCA_analysis.R")
source("/Users/sebastiaanvandenbroeck/Documents/KUL/Jaar 1/Multivariate statistics/2 Principal component analysis/GSP_PCA_analysis.R")
X
S
D
u
U
sum(U)
sum(U[,1])
sum(U[,1]^2)
sum(U[,2]^2)
sum(U[,3]^2)
gsp.pca
gsp.pca$rotation
gsp.pca$rotation$PC1
gsp.pca$rotation[,1]
sum(gsp.pca$rotation[,1])
colSums(gsp.pca$rotation[,1]^2)
colSums(gsp.pca$rotation^2)
gsp.pca
gsp.pca$stand
gsp.pca$std
gsp.pca$sdev
gsp.pca$sdev^2
source("/Users/sebastiaanvandenbroeck/Documents/KUL/Jaar 1/Multivariate statistics/2 Principal component analysis/GSP_PCA_analysis.R")
source("/Users/sebastiaanvandenbroeck/Documents/KUL/Jaar 1/Multivariate statistics/2 Principal component analysis/GSP_PCA_analysis.R")
U
gsp.pca$rotation
abs(u)
abs(U)
abs(gsp.pca$rotation)
source("/Users/sebastiaanvandenbroeck/Documents/KUL/Jaar 1/Multivariate statistics/2 Principal component analysis/GSP_PCA_analysis.R")
all.equal(U, gsp.pca$rotation)
all.equal(abs(U), abs(gsp.pca$rotation))
abs(U)-abs(gsp.pca$rotation))
abs(U)-abs(gsp.pca$rotation))
abs(U)-abs(gsp.pca$rotation)
round(abs(U), 4)-round(abs(gsp.pca$rotation), 4)
all.equal(round(abs(U), 4), round(abs(gsp.pca$rotation), 4)
)
if (round(abs(U), 4)-round(abs(gsp.pca$rotation), 4) == 0){print("lskjdf")}
elseiif (round(abs(U), 4)-round(abs(gsp.pca$rotation), 4) == 0){print("lskjdf")}
elseif (round(abs(U), 4)-round(abs(gsp.pca$rotation), 4) == 0){print("lskjdf")}
source("/Users/sebastiaanvandenbroeck/Documents/KUL/Jaar 1/Multivariate statistics/2 Principal component analysis/GSP_PCA_analysis.R")
install.packages("testit")
source("/Users/sebastiaanvandenbroeck/Documents/KUL/Jaar 1/Multivariate statistics/2 Principal component analysis/GSP_PCA_analysis.R")
source("/Users/sebastiaanvandenbroeck/Documents/KUL/Jaar 1/Multivariate statistics/2 Principal component analysis/GSP_PCA_analysis.R")
source("/Users/sebastiaanvandenbroeck/Documents/KUL/Jaar 1/Multivariate statistics/2 Principal component analysis/GSP_PCA_analysis.R")
D
sqrt(D)
diag(gsp.pca$sdev^2)
source("/Users/sebastiaanvandenbroeck/Documents/KUL/Jaar 1/Multivariate statistics/2 Principal component analysis/GSP_PCA_analysis.R")
D
source("/Users/sebastiaanvandenbroeck/Documents/KUL/Jaar 1/Multivariate statistics/2 Principal component analysis/GSP_PCA_analysis.R")
round(D, 4) - round(diag(gsp.pca$sdev), 4) == 0
round(D, 4)
round(diag(gsp.pca$sdev), 4)
source("/Users/sebastiaanvandenbroeck/Documents/KUL/Jaar 1/Multivariate statistics/2 Principal component analysis/GSP_PCA_analysis.R")
round(sqrt(D), 4)
round(diag(gsp.pca$sdev), 4)
source("/Users/sebastiaanvandenbroeck/Documents/KUL/Jaar 1/Multivariate statistics/2 Principal component analysis/GSP_PCA_analysis.R")
round(sqrt(D), 3) - round(diag(gsp.pca$sdev), 3) == 0$
)
round(sqrt(D), 3) - round(diag(gsp.pca$sdev), 3) == 0
source("/Users/sebastiaanvandenbroeck/Documents/KUL/Jaar 1/Multivariate statistics/2 Principal component analysis/GSP_PCA_analysis.R")
round(sqrt(D), 3) - round(diag(gsp.pca$sdev), 3) == 0
source("/Users/sebastiaanvandenbroeck/Documents/KUL/Jaar 1/Multivariate statistics/2 Principal component analysis/GSP_PCA_analysis.R")
source("/Users/sebastiaanvandenbroeck/Documents/KUL/Jaar 1/Multivariate statistics/2 Principal component analysis/GSP_PCA_analysis.R")
source("/Users/sebastiaanvandenbroeck/Documents/KUL/Jaar 1/Multivariate statistics/2 Principal component analysis/GSP_PCA_analysis.R")
source("/Users/sebastiaanvandenbroeck/Documents/KUL/Jaar 1/Multivariate statistics/2 Principal component analysis/GSP_PCA_analysis.R")
round(abs(U), 4)
round(abs(gsp.pca$rotation), 4)
source("/Users/sebastiaanvandenbroeck/Documents/KUL/Jaar 1/Multivariate statistics/2 Principal component analysis/GSP_PCA_analysis.R")
A
Z
Zst
plot(z)
plot(Z)
plot(Zst)
source("/Users/sebastiaanvandenbroeck/Documents/KUL/Jaar 1/Multivariate statistics/2 Principal component analysis/GSP_PCA_analysis.R")
source("/Users/sebastiaanvandenbroeck/Documents/KUL/Jaar 1/Multivariate statistics/2 Principal component analysis/GSP_PCA_analysis.R")
source("/Users/sebastiaanvandenbroeck/Documents/KUL/Jaar 1/Multivariate statistics/2 Principal component analysis/GSP_PCA_analysis.R")
X
X[1:12]
X[,1:12]
U
A
source("/Users/sebastiaanvandenbroeck/Documents/KUL/Jaar 1/Multivariate statistics/2 Principal component analysis/GSP_PCA_analysis.R")
??size
??"col size"
??col
??"dataframe size"
??"data frame size"
dim(X)
dim(U)
dim(diag(gsp.pca$sdev)
)
source("/Users/sebastiaanvandenbroeck/Documents/KUL/Jaar 1/Multivariate statistics/2 Principal component analysis/GSP_PCA_analysis.R")
Z
Zst
U
q()
ls()
rm(list=ls())
ls()
q()
load()
library(Hmisc)
getHdata(prostate)
head(prostate)
Y = data$dtime
data = na.omit(prostate[,c("dtime", "status","rx")])
data$d1 = as.numeric(data$status=="dead - prostatic ca")
data$d3 = as.numeric(data$status=="alive")
data$d2 = 1-(data$d1+data$d3)
data$brx = as.numeric(data$rx=="5.0 mg estrogen"|data$rx=="1.0 mg estrogen")
head(data)
Y = data$dtime
Delta = data$d1
group = factor(data$brx)
library(cmprsk)
Y = data$dtime
group = factor(data$brx)
D = data$d1 + 2*data$d2
fit = cuminc(Y,D,group,cencode=0)
fit
cfit1 = fit[[1]]$est
ctime1 = fit[[1]]$time
tfit1 = fit[[2]]$est
ttime1 = fit[[2]]$time
cfit2 = fit[[3]]$est
ctime2 = fit[[3]]$time
tfit2 = fit[[4]]$est
ttime2 = fit[[4]]$time
par(mfrow = c(1,2))
plot(ttime1,tfit1,col=1,type = "l",ylim = c(0,0.5),main = "Cancer",xlab = "Time",ylab = "Probability")
lines(ctime1,cfit1, col=2,type="l")
legend(0, 0.5, legend = c("Treatment","Placebo"), col = c(1,2), lty = 1)
plot(ttime2,tfit2,col=1,type = "l",ylim = c(0,0.5),main = "Non-Cancer",xlab = "Time",ylab = "Probability")
lines(ctime2,cfit2, col=2,type="l")
library(cmprsk)
cov = cbind(data$rx,data$age,data$pf,data$hx,data$hg,data$sz,data$sg)
cov
dimnames(cov)[[2]] = c('rx','age','pf','hx','hg','sz','sg')
dimnames(cov)[[2]] = c('rx','age','pf','hx','hg','sz','sg')
library(Hmisc)
getHdata(prostate)
head(prostate)
data = na.omit(prostate[,c("dtime", "status","rx")])
data$d1 = as.numeric(data$status=="dead - prostatic ca")
data$d3 = as.numeric(data$status=="alive")
data$d2 = 1-(data$d1+data$d3)
data$brx = as.numeric(data$rx=="5.0 mg estrogen"|data$rx=="1.0 mg estrogen")
head(data)
Y = data$dtime
Delta = data$d1
group = factor(data$brx)
tsurv = survfit(Surv(Y,Delta)~1,subset=(group==1))
tfit = 1-tsurv$surv
ttime = tsurv$time
csurv = survfit(Surv(Y,Delta)~1,subset=(group==0))
cfit = 1-csurv$surv
ctime = csurv$time
par(mfrow = c(1,1))
plot(ttime,tfit,col=1,type="s",ylim = c(0,0.5),main = "Cancer",xlab = "Time",ylab = "Probability")
lines(ctime,cfit,col=2,type="s")
legend(0, 0.5, legend = c("Treatment","Placebo"), col = c(1,2), lty = 1)
library(cmprsk)
Y = data$dtime
group = factor(data$brx)
D = data$d1 + 2*data$d2
fit = cuminc(Y,D,group,cencode=0)
cfit1 = fit[[1]]$est
ctime1 = fit[[1]]$time
tfit1 = fit[[2]]$est
ttime1 = fit[[2]]$time
cfit2 = fit[[3]]$est
ctime2 = fit[[3]]$time
tfit2 = fit[[4]]$est
ttime2 = fit[[4]]$time
par(mfrow = c(1,2))
plot(ttime1,tfit1,col=1,type = "l",ylim = c(0,0.5),main = "Cancer",xlab = "Time",ylab = "Probability")
lines(ctime1,cfit1, col=2,type="l")
legend(0, 0.5, legend = c("Treatment","Placebo"), col = c(1,2), lty = 1)
plot(ttime2,tfit2,col=1,type = "l",ylim = c(0,0.5),main = "Non-Cancer",xlab = "Time",ylab = "Probability")
lines(ctime2,cfit2, col=2,type="l")
library(Hmisc)
getHdata(prostate)
head(prostate)
data = na.omit(prostate[,c("dtime", "status", "rx", "age", "pf", "hx", "hg", "sz", "sg")])
d1 = as.numeric(data$status=="dead - prostatic ca")
d3 = as.numeric(data$status=="alive")
d2 = 1-(d1+d3)
data$status = d1 + 2*d2
data$rx = as.numeric(data$rx=="5.0 mg estrogen"|data$rx=="1.0 mg estrogen")
data$pf =  as.numeric(data$pf=="normal activity")
data$sz = as.numeric(data$sz>29)
data$sg =  as.numeric(data$sg>10)
data$hg = (data$hg-mean(data$hg))/sd(data$hg)
data$age = (data$age-mean(data$age))/sd(data$age)
head(data)
coxph(Surv(dtime,status==1)~rx+age+pf+hx+hg+sz+sg,data=data)
coxph(Surv(dtime,status==2)~rx+age+pf+hx+hg+sz+sg,data=data)
data
library(cmprsk)
cov = cbind(data$rx,data$age,data$pf,data$hx,data$hg,data$sz,data$sg)
dimnames(cov)[[2]] = c('rx','age','pf','hx','hg','sz','sg')
cov
c1 = crr(data$dtime, data$status, cov, failcode=1)
c2 = crr(data$dtime, data$status, cov, failcode=2)
library(fastcmprsk)
CR = fastCrr(Crisk(dtime,status)~rx+age+pf+hx+hg+sz+sg,data=data)
CR$coef
data$status2 = d2 + 2*d1
CR2 = fastCrr(Crisk(dtime,status2)~rx+age+pf+hx+hg+sz+sg,data=data)
CR2$coef
covx1 = c(1,0,1,1,0,1,1)
covx0 = c(0,0,1,1,0,1,1)
pc1 = predict(c1,rbind(covx1,covx0))
pc2 = predict(c2,rbind(covx1,covx0))
par(mfrow=c(1,2))
plot(pc1,col=c(1,2),lty=1,xlim=c(0,70),ylim=c(0,0.8),main="Cancer",xlab="Time",ylab="Probability")
legend(0, 0.8,legend = c("Treatment","Placebo"),col = c(1,2), lty = 1)
plot(pc2,col=c(1,2),lty=1,xlim=c(0,70),ylim=c(0,0.8),main="Non-Cancer",xlab="Time",ylab="Probability")
data
pc1
library(survival)
library(survminer)
library(smcure)
library(cmprsk)
options(scipen=999)
data <- read.csv("data/bankruptcy_transformed.csv")
data <- na.omit(data)
data$censor <- ifelse(data$event_indicator==3, 1, 0)
head(data)
table(data$status, data$event_indicator)
cat("\n")
data <- read.csv("data/bankruptcy_transformed.csv")
data <- na.omit(data)
data$censor <- ifelse(data$event_indicator==3, 1, 0)
data <- read.csv("data/bankruptcy_transformed.csv")
data <- na.omit(data)
head(data)
View(data)
data <- read.csv("data/bankruptcy_transformed.csv")
setwd("~/Documents/KUL/Jaar_2/survival_analysis")
data <- read.csv("data/bankruptcy_transformed.csv")
data <- na.omit(data)
data$censor <- ifelse(data$event_indicator==3, 1, 0)
head(data)
# Competing risk Cox PH on the subdistribution hazard
cov <- cbind(data$mean_pl, data$mean_total_assets, data$mean_n_employees,
data$cooperative, data$nonprofit, data$other, data$private)
dimnames(cov)[[2]] = c("Mean profit/loss", "Mean total assets",
"Mean number of employees", "Cooperative","Nonprofit",
"Other", "Private")
c0 <- crr(data$years_to_event, data$event_indicator, cov, failcode=0)
c1 <- crr(data$years_to_event, data$event_indicator, cov, failcode=1)
c2 <- crr(data$years_to_event, data$event_indicator, cov, failcode=2)
source("~/Documents/KUL/Jaar_2/survival_analysis/competing_risks.R", echo=TRUE)
