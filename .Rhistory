source("/Users/sebastiaanvandenbroeck/Documents/KUL/Jaar 1/Multivariate statistics/2 Principal component analysis/GSP_PCA_analysis.R")
D
source("/Users/sebastiaanvandenbroeck/Documents/KUL/Jaar 1/Multivariate statistics/2 Principal component analysis/GSP_PCA_analysis.R")
round(D, 4) - round(diag(gsp.pca$sdev), 4) == 0
round(D, 4)
round(diag(gsp.pca$sdev), 4)
source("/Users/sebastiaanvandenbroeck/Documents/KUL/Jaar 1/Multivariate statistics/2 Principal component analysis/GSP_PCA_analysis.R")
round(sqrt(D), 4)
round(diag(gsp.pca$sdev), 4)
source("/Users/sebastiaanvandenbroeck/Documents/KUL/Jaar 1/Multivariate statistics/2 Principal component analysis/GSP_PCA_analysis.R")
round(sqrt(D), 3) - round(diag(gsp.pca$sdev), 3) == 0$
)
round(sqrt(D), 3) - round(diag(gsp.pca$sdev), 3) == 0
source("/Users/sebastiaanvandenbroeck/Documents/KUL/Jaar 1/Multivariate statistics/2 Principal component analysis/GSP_PCA_analysis.R")
round(sqrt(D), 3) - round(diag(gsp.pca$sdev), 3) == 0
source("/Users/sebastiaanvandenbroeck/Documents/KUL/Jaar 1/Multivariate statistics/2 Principal component analysis/GSP_PCA_analysis.R")
source("/Users/sebastiaanvandenbroeck/Documents/KUL/Jaar 1/Multivariate statistics/2 Principal component analysis/GSP_PCA_analysis.R")
source("/Users/sebastiaanvandenbroeck/Documents/KUL/Jaar 1/Multivariate statistics/2 Principal component analysis/GSP_PCA_analysis.R")
source("/Users/sebastiaanvandenbroeck/Documents/KUL/Jaar 1/Multivariate statistics/2 Principal component analysis/GSP_PCA_analysis.R")
round(abs(U), 4)
round(abs(gsp.pca$rotation), 4)
source("/Users/sebastiaanvandenbroeck/Documents/KUL/Jaar 1/Multivariate statistics/2 Principal component analysis/GSP_PCA_analysis.R")
A
Z
Zst
plot(z)
plot(Z)
plot(Zst)
source("/Users/sebastiaanvandenbroeck/Documents/KUL/Jaar 1/Multivariate statistics/2 Principal component analysis/GSP_PCA_analysis.R")
source("/Users/sebastiaanvandenbroeck/Documents/KUL/Jaar 1/Multivariate statistics/2 Principal component analysis/GSP_PCA_analysis.R")
source("/Users/sebastiaanvandenbroeck/Documents/KUL/Jaar 1/Multivariate statistics/2 Principal component analysis/GSP_PCA_analysis.R")
X
X[1:12]
X[,1:12]
U
A
source("/Users/sebastiaanvandenbroeck/Documents/KUL/Jaar 1/Multivariate statistics/2 Principal component analysis/GSP_PCA_analysis.R")
??size
??"col size"
??col
??"dataframe size"
??"data frame size"
dim(X)
dim(U)
dim(diag(gsp.pca$sdev)
)
source("/Users/sebastiaanvandenbroeck/Documents/KUL/Jaar 1/Multivariate statistics/2 Principal component analysis/GSP_PCA_analysis.R")
Z
Zst
U
q()
ls()
rm(list=ls())
ls()
q()
load()
library(Hmisc)
getHdata(prostate)
head(prostate)
Y = data$dtime
data = na.omit(prostate[,c("dtime", "status","rx")])
data$d1 = as.numeric(data$status=="dead - prostatic ca")
data$d3 = as.numeric(data$status=="alive")
data$d2 = 1-(data$d1+data$d3)
data$brx = as.numeric(data$rx=="5.0 mg estrogen"|data$rx=="1.0 mg estrogen")
head(data)
Y = data$dtime
Delta = data$d1
group = factor(data$brx)
library(cmprsk)
Y = data$dtime
group = factor(data$brx)
D = data$d1 + 2*data$d2
fit = cuminc(Y,D,group,cencode=0)
fit
cfit1 = fit[[1]]$est
ctime1 = fit[[1]]$time
tfit1 = fit[[2]]$est
ttime1 = fit[[2]]$time
cfit2 = fit[[3]]$est
ctime2 = fit[[3]]$time
tfit2 = fit[[4]]$est
ttime2 = fit[[4]]$time
par(mfrow = c(1,2))
plot(ttime1,tfit1,col=1,type = "l",ylim = c(0,0.5),main = "Cancer",xlab = "Time",ylab = "Probability")
lines(ctime1,cfit1, col=2,type="l")
legend(0, 0.5, legend = c("Treatment","Placebo"), col = c(1,2), lty = 1)
plot(ttime2,tfit2,col=1,type = "l",ylim = c(0,0.5),main = "Non-Cancer",xlab = "Time",ylab = "Probability")
lines(ctime2,cfit2, col=2,type="l")
library(cmprsk)
cov = cbind(data$rx,data$age,data$pf,data$hx,data$hg,data$sz,data$sg)
cov
dimnames(cov)[[2]] = c('rx','age','pf','hx','hg','sz','sg')
dimnames(cov)[[2]] = c('rx','age','pf','hx','hg','sz','sg')
library(Hmisc)
getHdata(prostate)
head(prostate)
data = na.omit(prostate[,c("dtime", "status","rx")])
data$d1 = as.numeric(data$status=="dead - prostatic ca")
data$d3 = as.numeric(data$status=="alive")
data$d2 = 1-(data$d1+data$d3)
data$brx = as.numeric(data$rx=="5.0 mg estrogen"|data$rx=="1.0 mg estrogen")
head(data)
Y = data$dtime
Delta = data$d1
group = factor(data$brx)
tsurv = survfit(Surv(Y,Delta)~1,subset=(group==1))
tfit = 1-tsurv$surv
ttime = tsurv$time
csurv = survfit(Surv(Y,Delta)~1,subset=(group==0))
cfit = 1-csurv$surv
ctime = csurv$time
par(mfrow = c(1,1))
plot(ttime,tfit,col=1,type="s",ylim = c(0,0.5),main = "Cancer",xlab = "Time",ylab = "Probability")
lines(ctime,cfit,col=2,type="s")
legend(0, 0.5, legend = c("Treatment","Placebo"), col = c(1,2), lty = 1)
library(cmprsk)
Y = data$dtime
group = factor(data$brx)
D = data$d1 + 2*data$d2
fit = cuminc(Y,D,group,cencode=0)
cfit1 = fit[[1]]$est
ctime1 = fit[[1]]$time
tfit1 = fit[[2]]$est
ttime1 = fit[[2]]$time
cfit2 = fit[[3]]$est
ctime2 = fit[[3]]$time
tfit2 = fit[[4]]$est
ttime2 = fit[[4]]$time
par(mfrow = c(1,2))
plot(ttime1,tfit1,col=1,type = "l",ylim = c(0,0.5),main = "Cancer",xlab = "Time",ylab = "Probability")
lines(ctime1,cfit1, col=2,type="l")
legend(0, 0.5, legend = c("Treatment","Placebo"), col = c(1,2), lty = 1)
plot(ttime2,tfit2,col=1,type = "l",ylim = c(0,0.5),main = "Non-Cancer",xlab = "Time",ylab = "Probability")
lines(ctime2,cfit2, col=2,type="l")
library(Hmisc)
getHdata(prostate)
head(prostate)
data = na.omit(prostate[,c("dtime", "status", "rx", "age", "pf", "hx", "hg", "sz", "sg")])
d1 = as.numeric(data$status=="dead - prostatic ca")
d3 = as.numeric(data$status=="alive")
d2 = 1-(d1+d3)
data$status = d1 + 2*d2
data$rx = as.numeric(data$rx=="5.0 mg estrogen"|data$rx=="1.0 mg estrogen")
data$pf =  as.numeric(data$pf=="normal activity")
data$sz = as.numeric(data$sz>29)
data$sg =  as.numeric(data$sg>10)
data$hg = (data$hg-mean(data$hg))/sd(data$hg)
data$age = (data$age-mean(data$age))/sd(data$age)
head(data)
coxph(Surv(dtime,status==1)~rx+age+pf+hx+hg+sz+sg,data=data)
coxph(Surv(dtime,status==2)~rx+age+pf+hx+hg+sz+sg,data=data)
data
library(cmprsk)
cov = cbind(data$rx,data$age,data$pf,data$hx,data$hg,data$sz,data$sg)
dimnames(cov)[[2]] = c('rx','age','pf','hx','hg','sz','sg')
cov
c1 = crr(data$dtime, data$status, cov, failcode=1)
c2 = crr(data$dtime, data$status, cov, failcode=2)
library(fastcmprsk)
CR = fastCrr(Crisk(dtime,status)~rx+age+pf+hx+hg+sz+sg,data=data)
CR$coef
data$status2 = d2 + 2*d1
CR2 = fastCrr(Crisk(dtime,status2)~rx+age+pf+hx+hg+sz+sg,data=data)
CR2$coef
covx1 = c(1,0,1,1,0,1,1)
covx0 = c(0,0,1,1,0,1,1)
pc1 = predict(c1,rbind(covx1,covx0))
pc2 = predict(c2,rbind(covx1,covx0))
par(mfrow=c(1,2))
plot(pc1,col=c(1,2),lty=1,xlim=c(0,70),ylim=c(0,0.8),main="Cancer",xlab="Time",ylab="Probability")
legend(0, 0.8,legend = c("Treatment","Placebo"),col = c(1,2), lty = 1)
plot(pc2,col=c(1,2),lty=1,xlim=c(0,70),ylim=c(0,0.8),main="Non-Cancer",xlab="Time",ylab="Probability")
data
pc1
install.packages("devtoosl")
install.packages("devtools")
install_github("jalvesaq/colorout")
devtools::install_github("jalvesaq/colorout")
library(dplyr)
library(survival)
library(frailtySurv)
library(frailtyEM)
library(ggstatsplot)
library(ggplot2)
library(parfm)
options(scipen = 999)
rm(list=ls())
# --- Read data
data <- read.csv("data/bankruptcy_transformed_alive_and_fail.csv")
setwd("~/Documents/KUL/Jaar_2/survival_analysis")
library(dplyr)
library(survival)
library(frailtySurv)
library(frailtyEM)
library(ggstatsplot)
library(ggplot2)
library(parfm)
options(scipen = 999)
rm(list=ls())
# --- Read data
data <- read.csv("data/bankruptcy_transformed_alive_and_fail.csv")
# The last row can be empty
data <- na.omit(data)
# Events other than bankruptcy are considered censored
data$censor <- ifelse(data$event_indicator == 2, 1, 0)
data$censor_total <- ifelse(data$status=="alive", 1, 0)
data$censor_liq <- ifelse(data$event_indicator == 4, 1, 0)
data$censor_mer <- ifelse(data$event_indicator == 0, 1, 0)
# Make dummies for the size classification relative to medium sized companies
data$size_small <- ifelse(data$size_classification == "Small", 1, 0)
data$size_large <- ifelse(data$size_classification == "Large", 1, 0)
data$size_v_large <- ifelse(data$size_classification == "Very large", 1, 0)
# Rename
data$EBITDA <- data$EBTIDA
data$EBTIDA <- NULL
# There is a row without a cluster
data <- data[data$sector!="",]
# --- Transform variables / remove outliers
# [x] total_liabilities                         -> use the log
# [x] cash_by_total_assets                      -> use the log
# [x] cash_by_current_liabilities               -> use the log
# [x] current_assets_by_current_liabilities     -> use the log
# [x] tax                                       -> use the truncation
# [x] EBITDA                                    -> use the truncation
# [x] roa                                       -> use the truncation
# [x] financial_expenses_by_total_assets        -> use the truncation
# [x] EBIT                                      -> use the truncation
# [x] current_liabilites_by_total_liabilities   -> use the log
# [x] working_capital_by_total_assets           -> use the truncation
# [x] size_classification
# [x] income_tax_by_total_assets                -> use the truncation
# [x] sector
# [x] n_employees                               -> use the log
# [x] cooperative	nonprofit	other	private	public
# total_liabilities
data$log_total_liabilities <- log(data$total_liabilities)
# cash_by_total_assets
data$log_cash_by_total_assets <- log(data$cash_by_total_assets)
min <- min(
data$log_cash_by_total_assets[is.finite(data$log_cash_by_total_assets)]
)
data$log_cash_by_total_assets <- replace(
data$log_cash_by_total_assets, data$log_cash_by_total_assets == -Inf,
min
)
data$log_cash_by_total_assets <- replace(
data$log_cash_by_total_assets, is.na(data$log_cash_by_total_assets),
min
)
# cash_by_current_liabilities
data$log_cash_by_current_liabilities <- log(data$cash_by_current_liabilities)
min <- min(
data$log_cash_by_current_liabilities[is.finite(data$log_cash_by_current_liabilities)]
)
data$log_cash_by_current_liabilities <- replace(
data$log_cash_by_current_liabilities, data$log_cash_by_current_liabilities == -Inf,
min
)
data$log_cash_by_current_liabilities <- replace(
data$log_cash_by_current_liabilities, is.na(data$log_cash_by_current_liabilities),
min
)
# current_assets_by_current_liabilities
data$log_current_assets_by_current_liabilities <- log(data$current_assets_by_current_liabilities)
min <- min(
data$log_current_assets_by_current_liabilities[is.finite(data$log_current_assets_by_current_liabilities)]
)
data$log_current_assets_by_current_liabilities <- replace(
data$log_current_assets_by_current_liabilities, data$log_current_assets_by_current_liabilities == -Inf,
min
)
data$log_current_assets_by_current_liabilities <- replace(
data$log_current_assets_by_current_liabilities, is.na(data$log_current_assets_by_current_liabilities),
min
)
# tax
data$log_tax <- log(data$tax)
min <- min(
data$log_tax[is.finite(data$log_tax)]
)
data$log_tax <- replace(
data$log_tax, data$log_tax == -Inf,
min
)
data$log_tax <- replace(
data$log_tax, is.na(data$log_tax),
min
)
# Truncate extreme outliers
upper_bound <- quantile(data$tax, probs=c(0.50)) + 10 * IQR(data$tax)
lower_bound <- quantile(data$tax, probs=c(0.50)) - 10 * IQR(data$tax)
data$trunc_tax <- ifelse(data$tax > upper_bound, upper_bound,
ifelse(data$tax < lower_bound, lower_bound, data$tax))
# EBITDA
data$log_EBITDA <- log(data$EBITDA)
min <- min(
data$log_EBITDA[is.finite(data$log_EBITDA)]
)
data$log_EBITDA <- replace(
data$log_EBITDA, data$log_EBITDA == -Inf,
min
)
data$log_EBITDA <- replace(
data$log_EBITDA, is.na(data$log_EBITDA),
min
)
# Truncate extreme outliers
upper_bound <- quantile(data$EBITDA, probs=c(0.25)) + 10 * IQR(data$EBITDA)
lower_bound <- quantile(data$EBITDA, probs=c(0.75)) - 10 * IQR(data$EBITDA)
data$trunc_EBITDA <- ifelse(data$EBITDA > upper_bound, upper_bound,
ifelse(data$EBITDA < lower_bound, lower_bound, data$EBITDA))
# ROA
# Truncate extreme outliers
upper_bound <- quantile(data$roa, probs=c(0.5)) + 10 * IQR(data$roa)
lower_bound <- quantile(data$roa, probs=c(0.5)) - 10 * IQR(data$roa)
data$trunc_roa <- ifelse(data$roa > upper_bound, upper_bound,
ifelse(data$roa < lower_bound, lower_bound, data$roa))
# financial_expenses_by_total_assets
data$log_financial_expenses_by_total_assets <- log(data$financial_expenses_by_total_assets)
min <- min(
data$log_financial_expenses_by_total_assets[is.finite(data$log_financial_expenses_by_total_assets)]
)
data$log_financial_expenses_by_total_assets <- replace(
data$log_financial_expenses_by_total_assets, data$log_financial_expenses_by_total_assets == -Inf,
min
)
data$log_financial_expenses_by_total_assets <- replace(
data$log_financial_expenses_by_total_assets, is.na(data$log_financial_expenses_by_total_assets),
min
)
# Truncate extreme outliers
upper_bound <- quantile(data$financial_expenses_by_total_assets, probs=c(0.25)) + 10 * IQR(data$financial_expenses_by_total_assets)
lower_bound <- quantile(data$financial_expenses_by_total_assets, probs=c(0.75)) - 10 * IQR(data$financial_expenses_by_total_assets)
data$trunc_financial_expenses_by_total_assets <- ifelse(data$financial_expenses_by_total_assets > upper_bound, upper_bound,
ifelse(data$financial_expenses_by_total_assets < lower_bound, lower_bound, data$financial_expenses_by_total_assets))
# EBIT
data$log_EBIT <- log(data$EBIT)
min <- min(
data$log_EBIT[is.finite(data$log_EBIT)]
)
data$log_EBIT <- replace(
data$log_EBIT, data$log_EBIT == -Inf,
min
)
data$log_EBIT <- replace(
data$log_EBIT, is.na(data$log_EBIT),
min
)
# Truncate extreme outliers
upper_bound <- quantile(data$EBIT, probs=c(0.25)) + 10 * IQR(data$EBIT)
lower_bound <- quantile(data$EBIT, probs=c(0.75)) - 10 * IQR(data$EBIT)
data$trunc_EBIT <- ifelse(data$EBIT > upper_bound, upper_bound,
ifelse(data$EBIT < lower_bound, lower_bound, data$EBIT))
# current_liabilities_by_total_liabilities
data$log_current_liabilities_by_total_liabilities <- log(data$current_liabilites_by_total_liabilities)
min <- min(
data$log_current_liabilities_by_total_liabilities[is.finite(data$log_current_liabilities_by_total_liabilities)]
)
data$log_current_liabilities_by_total_liabilities <- replace(
data$log_current_liabilities_by_total_liabilities, data$log_current_liabilities_by_total_liabilities == -Inf,
min
)
data$log_current_liabilities_by_total_liabilities <- replace(
data$log_current_liabilities_by_total_liabilities, is.na(data$log_current_liabilities_by_total_liabilities),
min
)
# working_capital_by_total_assets
data$log_working_capital_by_total_assets <- log(data$working_capital_by_total_assets)
min <- min(
data$log_working_capital_by_total_assets[is.finite(data$log_working_capital_by_total_assets)]
)
data$log_working_capital_by_total_assets <- replace(
data$log_working_capital_by_total_assets, data$log_working_capital_by_total_assets == -Inf,
min
)
data$log_working_capital_by_total_assets <- replace(
data$log_working_capital_by_total_assets, is.na(data$log_working_capital_by_total_assets),
min
)
# Truncate extreme outliers
upper_bound <- quantile(data$working_capital_by_total_assets, probs=c(0.25)) + 5 * IQR(data$working_capital_by_total_assets)
lower_bound <- quantile(data$working_capital_by_total_assets, probs=c(0.75)) - 5 * IQR(data$working_capital_by_total_assets)
data$trunc_working_capital_by_total_assets <- ifelse(data$working_capital_by_total_assets > upper_bound, upper_bound,
ifelse(data$working_capital_by_total_assets < lower_bound, lower_bound, data$working_capital_by_total_assets))
# Size classification
# No transformations
# income_tax_by_total_assets
data$log_income_tax_by_total_assets <- log(data$income_tax_by_total_assets)
min <- min(
data$log_income_tax_by_total_assets[is.finite(data$log_income_tax_by_total_assets)]
)
data$log_income_tax_by_total_assets <- replace(
data$log_income_tax_by_total_assets, data$log_income_tax_by_total_assets == -Inf,
min
)
data$log_income_tax_by_total_assets <- replace(
data$log_income_tax_by_total_assets, is.na(data$log_income_tax_by_total_assets),
min
)
# Truncate extreme outliers
upper_bound <- quantile(data$income_tax_by_total_assets, probs=c(0.25)) + 5 * IQR(data$income_tax_by_total_assets)
lower_bound <- quantile(data$income_tax_by_total_assets, probs=c(0.75)) - 5 * IQR(data$income_tax_by_total_assets)
data$trunc_income_tax_by_total_assets <- ifelse(data$income_tax_by_total_assets > upper_bound, upper_bound,
ifelse(data$income_tax_by_total_assets < lower_bound, lower_bound, data$income_tax_by_total_assets))
# sector
# n_employees
data$log_n_employees = log(data$n_employees)
# Don't forget to report that we did this:
# 3 observations are removed
data <- data[data$years_to_event!=0, ]
data <- data %>%
group_by(sector) %>%
mutate(n=n()) %>%
filter(n > 1) %>%
select(-n)
table(data$censor_total)
jpeg(file = "visualizations/KM_estimator.jpeg",
width = 3000, height = 3000, res = 400)
par(mfrow=c(2, 2))
par(mar=c(4, 4, 4, 4))
par(family="Times")
plot(survfit(Surv(years_to_event, censor_total) ~ 1, data=data),
main="All causes confounded", xlab="Years to event", ylab="KM estimator")
plot(survfit(Surv(years_to_event, censor_mer) ~ 1, data=data),
main="Main event = merger", xlab="Years to event", ylab="KM estimator")
plot(survfit(Surv(years_to_event, censor_liq) ~ 1, data=data),
main="Main event = liquidation", xlab="Years to event", ylab="KM estimator")
plot(survfit(Surv(years_to_event, censor) ~ 1, data=data),
main="Main event = bankruptcy", xlab="Years to event", ylab="KM estimator")
dev.off()
table(data$censor_mer)
table(data$censor_liq)
table(data$censor)
jpeg(file = "visualizations/KM_estimator.jpeg",
width = 3000, height = 3000, res = 400)
par(mfrow=c(2, 2))
par(mar=c(4, 4, 4, 4))
par(family="Times")
plot(survfit(Surv(years_to_event, censor_total==0) ~ 1, data=data),
main="All causes confounded", xlab="Years to event", ylab="KM estimator")
plot(survfit(Surv(years_to_event, censor_mer) ~ 1, data=data),
main="Main event = merger", xlab="Years to event", ylab="KM estimator")
plot(survfit(Surv(years_to_event, censor_liq) ~ 1, data=data),
main="Main event = liquidation", xlab="Years to event", ylab="KM estimator")
plot(survfit(Surv(years_to_event, censor) ~ 1, data=data),
main="Main event = bankruptcy", xlab="Years to event", ylab="KM estimator")
dev.off()
?Surv
table(data$censor_total)
survfit(Surv(years_to_event, censor_total==0) ~ 1
survfit(Surv(years_to_event, censor_total==0) ~ 1, data=data)
table(data$status)
survfit(Surv(years_to_event, censor_total==1) ~ 1, data=data)
table(data$status)
table(data$censor_mer)
jpeg(file = "visualizations/KM_estimator.jpeg",
width = 3000, height = 3000, res = 400)
par(mfrow=c(2, 2))
par(mar=c(4, 4, 4, 4))
par(family="Times")
plot(survfit(Surv(years_to_event, censor_total==1) ~ 1, data=data),
main="All causes confounded", xlab="Years to event", ylab="KM estimator")
plot(survfit(Surv(years_to_event, censor_mer) ~ 1, data=data),
main="Main event = merger", xlab="Years to event", ylab="KM estimator")
plot(survfit(Surv(years_to_event, censor_liq) ~ 1, data=data),
main="Main event = liquidation", xlab="Years to event", ylab="KM estimator")
plot(survfit(Surv(years_to_event, censor) ~ 1, data=data),
main="Main event = bankruptcy", xlab="Years to event", ylab="KM estimator")
dev.off()
table(data$censor_total)
jpeg(file = "visualizations/KM_estimator.jpeg",
width = 3000, height = 3000, res = 400)
par(mfrow=c(2, 2))
par(mar=c(4, 4, 4, 4))
par(family="Times")
plot(survfit(Surv(years_to_event, censor_total) ~ 1, data=data),
main="All causes confounded", xlab="Years to event", ylab="KM estimator")
plot(survfit(Surv(years_to_event, censor_mer) ~ 1, data=data),
main="Main event = merger", xlab="Years to event", ylab="KM estimator")
plot(survfit(Surv(years_to_event, censor_liq) ~ 1, data=data),
main="Main event = liquidation", xlab="Years to event", ylab="KM estimator")
plot(survfit(Surv(years_to_event, censor) ~ 1, data=data),
main="Main event = bankruptcy", xlab="Years to event", ylab="KM estimator")
dev.off()
table(data$status)
# Histogram of survival times
jpeg(file = "visualizations/survival_time.jpeg",
width = 3000, height = 3000, res = 400)
par(mfrow=c(1, 1))
par(mar=c(3, 3, 3, 3))
par(family="Times")
hist(data$years_to_event, main="Years to event", breaks=50)
hist(data[data$status=="Bankruptcy",]$years_to_event, breaks=50, col="blue")
dev.off()
table(data[data$status=="Bankruptcy",]$years_to_event)
length(data[data$status=="Bankruptcy",]$years_to_event)
jpeg(file = "visualizations/survival_time.jpeg",
width = 3000, height = 3000, res = 400)
par(mfrow=c(1, 1))
par(mar=c(3, 3, 3, 3))
par(family="Times")
hist(data$years_to_event, main="Years to event", breaks=50)
hist(data[data$status=="Bankruptcy",]$years_to_event, breaks=50, col="blue", add=TRUE)
dev.off()
jpeg(file = "visualizations/survival_time.jpeg",
width = 3000, height = 3000, res = 400)
par(mfrow=c(1, 1))
par(mar=c(3, 3, 3, 3))
par(family="Times")
hist(data$years_to_event, main="Years to event", breaks=50)
dev.off()
